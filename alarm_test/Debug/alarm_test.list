
alarm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000291c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002ab4  08002ab4  00003ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba0  08002ba0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ba0  08002ba0  00003ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ba8  08002ba8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba8  08002ba8  00003ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bac  08002bac  00003bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bb0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002bbc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002bbc  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af2f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c80  00000000  00000000  0000ef6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00010bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000772  00000000  00000000  00011588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016257  00000000  00000000  00011cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce93  00000000  00000000  00027f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008814c  00000000  00000000  00034de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcf30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b8  00000000  00000000  000bcf74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000bf62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a9c 	.word	0x08002a9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002a9c 	.word	0x08002a9c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <MX_GPIO_Init+0x70>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <MX_GPIO_Init+0x70>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <MX_GPIO_Init+0x70>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_GPIO_Init+0x70>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <MX_GPIO_Init+0x70>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_GPIO_Init+0x70>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000552:	2320      	movs	r3, #32
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4804      	ldr	r0, [pc, #16]	@ (8000578 <MX_GPIO_Init+0x74>)
 8000566:	f000 fcd7 	bl	8000f18 <HAL_GPIO_Init>

}
 800056a:	bf00      	nop
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800
 8000578:	40020000 	.word	0x40020000

0800057c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <MX_I2C1_Init+0x50>)
 8000582:	4a13      	ldr	r2, [pc, #76]	@ (80005d0 <MX_I2C1_Init+0x54>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_I2C1_Init+0x50>)
 8000588:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <MX_I2C1_Init+0x58>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_I2C1_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_I2C1_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_I2C1_Init+0x50>)
 800059a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800059e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_I2C1_Init+0x50>)
 80005ba:	f000 fe49 	bl	8001250 <HAL_I2C_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c4:	f000 f9c2 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40005400 	.word	0x40005400
 80005d4:	00061a80 	.word	0x00061a80

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a19      	ldr	r2, [pc, #100]	@ (800065c <HAL_I2C_MspInit+0x84>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d12c      	bne.n	8000654 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <HAL_I2C_MspInit+0x88>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <HAL_I2C_MspInit+0x88>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <HAL_I2C_MspInit+0x88>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000616:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061c:	2312      	movs	r3, #18
 800061e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000628:	2304      	movs	r3, #4
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <HAL_I2C_MspInit+0x8c>)
 8000634:	f000 fc70 	bl	8000f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <HAL_I2C_MspInit+0x88>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <HAL_I2C_MspInit+0x88>)
 8000642:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_I2C_MspInit+0x88>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	@ 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40005400 	.word	0x40005400
 8000660:	40023800 	.word	0x40023800
 8000664:	40020400 	.word	0x40020400

08000668 <lcd_init>:
#include "i2c.h"
#include <stdio.h>

// Function to initialize the LCD
void lcd_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    // 4-bit initialization
    HAL_Delay(50);  // Wait for >40ms
 800066c:	2032      	movs	r0, #50	@ 0x32
 800066e:	f000 fb49 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000672:	2030      	movs	r0, #48	@ 0x30
 8000674:	f000 f836 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(5);   // Wait for >4.1ms
 8000678:	2005      	movs	r0, #5
 800067a:	f000 fb43 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(0x30);
 800067e:	2030      	movs	r0, #48	@ 0x30
 8000680:	f000 f830 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(1);   // Wait for >100us
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fb3d 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(0x30);
 800068a:	2030      	movs	r0, #48	@ 0x30
 800068c:	f000 f82a 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(10);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fb37 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(0x20);  // 4-bit mode
 8000696:	2020      	movs	r0, #32
 8000698:	f000 f824 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fb31 	bl	8000d04 <HAL_Delay>

    // Display initialization
    lcd_send_cmd(LCD_CMD_FUNCTION_SET);  // Function set: DL=0 (4-bit mode), N=1 (2-line display), F=0 (5x8 characters)
 80006a2:	2028      	movs	r0, #40	@ 0x28
 80006a4:	f000 f81e 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fb2b 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(LCD_CMD_DISPLAY_OFF);   // Display off
 80006ae:	2008      	movs	r0, #8
 80006b0:	f000 f818 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fb25 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(LCD_CMD_CLEAR_DISPLAY); // Clear display
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f812 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fb1f 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(LCD_CMD_ENTRY_MODE_SET); // Entry mode set: I/D=1 (increment cursor), S=0 (no shift)
 80006c6:	2006      	movs	r0, #6
 80006c8:	f000 f80c 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 fb19 	bl	8000d04 <HAL_Delay>
    lcd_send_cmd(LCD_CMD_DISPLAY_ON);    // Display on: D=1, C=0, B=0 (Cursor and blink)
 80006d2:	200c      	movs	r0, #12
 80006d4:	f000 f806 	bl	80006e4 <lcd_send_cmd>
    HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fb13 	bl	8000d04 <HAL_Delay>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <lcd_send_cmd>:

// Function to send a command to the LCD
HAL_StatusTypeDef lcd_send_cmd(uint8_t cmd)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
    uint8_t data_t[4];

    data_u = (cmd & 0xF0); // Upper nibble
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f023 030f 	bic.w	r3, r3, #15
 80006f4:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0); // Lower nibble
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0C; // Enable high, RS low
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f043 030c 	orr.w	r3, r3, #12
 8000702:	b2db      	uxtb	r3, r3
 8000704:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // Enable low, RS low
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	b2db      	uxtb	r3, r3
 800070e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // Enable high, RS low
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	f043 030c 	orr.w	r3, r3, #12
 8000716:	b2db      	uxtb	r3, r3
 8000718:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // Enable low, RS low
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	b2db      	uxtb	r3, r3
 8000722:	72fb      	strb	r3, [r7, #11]

    if (HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD << 1, (uint8_t *)data_t, 4, HAL_MAX_DELAY) != HAL_OK)
 8000724:	f107 0208 	add.w	r2, r7, #8
 8000728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2304      	movs	r3, #4
 8000730:	214e      	movs	r1, #78	@ 0x4e
 8000732:	4806      	ldr	r0, [pc, #24]	@ (800074c <lcd_send_cmd+0x68>)
 8000734:	f000 fed0 	bl	80014d8 <HAL_I2C_Master_Transmit>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <lcd_send_cmd+0x5e>
    {
        // Handle error
        return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e000      	b.n	8000744 <lcd_send_cmd+0x60>
    }
    return HAL_OK;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028

08000750 <lcd_send_data>:

// Function to send data to the LCD
HAL_StatusTypeDef lcd_send_data(uint8_t data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af02      	add	r7, sp, #8
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
    uint8_t data_t[4];

    data_u = (data & 0xF0); // Upper nibble
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f023 030f 	bic.w	r3, r3, #15
 8000760:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0); // Lower nibble
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0D; // Enable high, RS high
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	f043 030d 	orr.w	r3, r3, #13
 800076e:	b2db      	uxtb	r3, r3
 8000770:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // Enable low, RS high
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	f043 0309 	orr.w	r3, r3, #9
 8000778:	b2db      	uxtb	r3, r3
 800077a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // Enable high, RS high
 800077c:	7bbb      	ldrb	r3, [r7, #14]
 800077e:	f043 030d 	orr.w	r3, r3, #13
 8000782:	b2db      	uxtb	r3, r3
 8000784:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // Enable low, RS high
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	f043 0309 	orr.w	r3, r3, #9
 800078c:	b2db      	uxtb	r3, r3
 800078e:	72fb      	strb	r3, [r7, #11]

    if (HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD << 1, (uint8_t *)data_t, 4, HAL_MAX_DELAY) != HAL_OK)
 8000790:	f107 0208 	add.w	r2, r7, #8
 8000794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2304      	movs	r3, #4
 800079c:	214e      	movs	r1, #78	@ 0x4e
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <lcd_send_data+0x68>)
 80007a0:	f000 fe9a 	bl	80014d8 <HAL_I2C_Master_Transmit>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <lcd_send_data+0x5e>
    {
        // Handle error
        return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <lcd_send_data+0x60>
    }
    return HAL_OK;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000028 	.word	0x20000028

080007bc <lcd_put_cursor>:
    HAL_Delay(50); // Wait for the command to complete
}

// Function to set the cursor position on the LCD
void lcd_put_cursor(int row, int col)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
    if (row == 0)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <lcd_put_cursor+0x1a>
    {
        col |= LCD_CMD_SET_CURSOR; // Set position for row 0
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	e006      	b.n	80007e4 <lcd_put_cursor+0x28>
    }
    else if (row == 1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d103      	bne.n	80007e4 <lcd_put_cursor+0x28>
    {
        col |= (LCD_CMD_SET_CURSOR | 0x40); // Set position for row 1
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80007e2:	603b      	str	r3, [r7, #0]
    }

    lcd_send_cmd(col); // Send command to set cursor position
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff7b 	bl	80006e4 <lcd_send_cmd>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <lcd_send_string>:

// Function to send a string to the LCD
void lcd_send_string(char *str)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++); // Send each character of the string
 80007fe:	e006      	b.n	800080e <lcd_send_string+0x18>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffa1 	bl	8000750 <lcd_send_data>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f4      	bne.n	8000800 <lcd_send_string+0xa>
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 f9fc 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f828 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f7ff fe6a 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000830:	f000 f926 	bl	8000a80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000834:	f7ff fea2 	bl	800057c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000838:	f000 f8f8 	bl	8000a2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800083c:	f7ff ff14 	bl	8000668 <lcd_init>
//
//			  gps_index = 0;
//		  }
//	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) {
 8000840:	2120      	movs	r1, #32
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <main+0x50>)
 8000844:	f000 fcec 	bl	8001220 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d107      	bne.n	800085e <main+0x3e>
	      // Button is pressed (logic 0 because pull-up)
	      lcd_put_cursor(0, 0);
 800084e:	2100      	movs	r1, #0
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ffb3 	bl	80007bc <lcd_put_cursor>
	      lcd_send_string("BTN: Pressed     ");
 8000856:	4807      	ldr	r0, [pc, #28]	@ (8000874 <main+0x54>)
 8000858:	f7ff ffcd 	bl	80007f6 <lcd_send_string>
 800085c:	e7f0      	b.n	8000840 <main+0x20>
	  } else {
	      lcd_put_cursor(0, 0);
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ffab 	bl	80007bc <lcd_put_cursor>
	      lcd_send_string("BTN: Released    ");
 8000866:	4804      	ldr	r0, [pc, #16]	@ (8000878 <main+0x58>)
 8000868:	f7ff ffc5 	bl	80007f6 <lcd_send_string>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) {
 800086c:	e7e8      	b.n	8000840 <main+0x20>
 800086e:	bf00      	nop
 8000870:	40020000 	.word	0x40020000
 8000874:	08002ab4 	.word	0x08002ab4
 8000878:	08002ac8 	.word	0x08002ac8

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	@ 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	@ 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f8da 	bl	8002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a26      	ldr	r2, [pc, #152]	@ (8000944 <SystemClock_Config+0xc8>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <SystemClock_Config+0xc8>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <SystemClock_Config+0xcc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a20      	ldr	r2, [pc, #128]	@ (8000948 <SystemClock_Config+0xcc>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <SystemClock_Config+0xcc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008ec:	2308      	movs	r3, #8
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80008f0:	2340      	movs	r3, #64	@ 0x40
 80008f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f943 	bl	8001b8c <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800090c:	f000 f81e 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000918:	2390      	movs	r3, #144	@ 0x90
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fba5 	bl	800207c <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000938:	f000 f808 	bl	800094c <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	@ 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fa8a 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f961 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_USART1_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a64:	f001 fd2a 	bl	80024bc <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f7ff ff6d 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000007c 	.word	0x2000007c
 8000a7c:	40011000 	.word	0x40011000

08000a80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <MX_USART2_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f001 fd00 	bl	80024bc <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f7ff ff43 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000c4 	.word	0x200000c4
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	@ 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a32      	ldr	r2, [pc, #200]	@ (8000bbc <HAL_UART_MspInit+0xe8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12d      	bne.n	8000b52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a30      	ldr	r2, [pc, #192]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b00:	f043 0310 	orr.w	r3, r3, #16
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b40:	2307      	movs	r3, #7
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481e      	ldr	r0, [pc, #120]	@ (8000bc4 <HAL_UART_MspInit+0xf0>)
 8000b4c:	f000 f9e4 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b50:	e030      	b.n	8000bb4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <HAL_UART_MspInit+0xf4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d12b      	bne.n	8000bb4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	4a16      	ldr	r2, [pc, #88]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <HAL_UART_MspInit+0xec>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b94:	230c      	movs	r3, #12
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_UART_MspInit+0xf0>)
 8000bb0:	f000 f9b2 	bl	8000f18 <HAL_GPIO_Init>
}
 8000bb4:	bf00      	nop
 8000bb6:	3730      	adds	r7, #48	@ 0x30
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40004400 	.word	0x40004400

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd0:	f7ff ff1a 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f001 ff2b 	bl	8002a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fe0f 	bl	8000820 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c10:	08002bb0 	.word	0x08002bb0
  ldr r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c18:	20000110 	.word	0x20000110

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f931 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe80 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f93b 	bl	8000efe <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 f911 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	2000010c 	.word	0x2000010c

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000010c 	.word	0x2000010c

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5c 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb0 	bl	8000e6c <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e159      	b.n	80011e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8148 	bne.w	80011e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a2 	beq.w	80011e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b57      	ldr	r3, [pc, #348]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a56      	ldr	r2, [pc, #344]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b54      	ldr	r3, [pc, #336]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a52      	ldr	r2, [pc, #328]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x202>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	@ (800120c <HAL_GPIO_Init+0x2f4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1fe>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <HAL_GPIO_Init+0x2f8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1fa>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a46      	ldr	r2, [pc, #280]	@ (8001214 <HAL_GPIO_Init+0x2fc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1f6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a45      	ldr	r2, [pc, #276]	@ (8001218 <HAL_GPIO_Init+0x300>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1f2>
 8001106:	2304      	movs	r3, #4
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110a:	2307      	movs	r3, #7
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x204>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b38      	ldr	r3, [pc, #224]	@ (800121c <HAL_GPIO_Init+0x304>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a24      	ldr	r2, [pc, #144]	@ (800121c <HAL_GPIO_Init+0x304>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011dc:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f aea2 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e12b      	b.n	80014ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d106      	bne.n	800127c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff f9ae 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	@ 0x24
 8001280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012b4:	f001 f8da 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 80012b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a81      	ldr	r2, [pc, #516]	@ (80014c4 <HAL_I2C_Init+0x274>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d807      	bhi.n	80012d4 <HAL_I2C_Init+0x84>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a80      	ldr	r2, [pc, #512]	@ (80014c8 <HAL_I2C_Init+0x278>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	bf94      	ite	ls
 80012cc:	2301      	movls	r3, #1
 80012ce:	2300      	movhi	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	e006      	b.n	80012e2 <HAL_I2C_Init+0x92>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a7d      	ldr	r2, [pc, #500]	@ (80014cc <HAL_I2C_Init+0x27c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	bf94      	ite	ls
 80012dc:	2301      	movls	r3, #1
 80012de:	2300      	movhi	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0e7      	b.n	80014ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4a78      	ldr	r2, [pc, #480]	@ (80014d0 <HAL_I2C_Init+0x280>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0c9b      	lsrs	r3, r3, #18
 80012f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a6a      	ldr	r2, [pc, #424]	@ (80014c4 <HAL_I2C_Init+0x274>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d802      	bhi.n	8001324 <HAL_I2C_Init+0xd4>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	3301      	adds	r3, #1
 8001322:	e009      	b.n	8001338 <HAL_I2C_Init+0xe8>
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	4a69      	ldr	r2, [pc, #420]	@ (80014d4 <HAL_I2C_Init+0x284>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	3301      	adds	r3, #1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	430b      	orrs	r3, r1
 800133e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800134a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	495c      	ldr	r1, [pc, #368]	@ (80014c4 <HAL_I2C_Init+0x274>)
 8001354:	428b      	cmp	r3, r1
 8001356:	d819      	bhi.n	800138c <HAL_I2C_Init+0x13c>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1e59      	subs	r1, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fbb1 f3f3 	udiv	r3, r1, r3
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800136c:	400b      	ands	r3, r1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00a      	beq.n	8001388 <HAL_I2C_Init+0x138>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1e59      	subs	r1, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001380:	3301      	adds	r3, #1
 8001382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001386:	e051      	b.n	800142c <HAL_I2C_Init+0x1dc>
 8001388:	2304      	movs	r3, #4
 800138a:	e04f      	b.n	800142c <HAL_I2C_Init+0x1dc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d111      	bne.n	80013b8 <HAL_I2C_Init+0x168>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	440b      	add	r3, r1
 80013a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a6:	3301      	adds	r3, #1
 80013a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e012      	b.n	80013de <HAL_I2C_Init+0x18e>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e58      	subs	r0, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	0099      	lsls	r1, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ce:	3301      	adds	r3, #1
 80013d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_Init+0x196>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e022      	b.n	800142c <HAL_I2C_Init+0x1dc>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <HAL_I2C_Init+0x1bc>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1e58      	subs	r0, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6859      	ldr	r1, [r3, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	440b      	add	r3, r1
 80013fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800140a:	e00f      	b.n	800142c <HAL_I2C_Init+0x1dc>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e58      	subs	r0, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	0099      	lsls	r1, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001422:	3301      	adds	r3, #1
 8001424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001428:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	6809      	ldr	r1, [r1, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800145a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6911      	ldr	r1, [r2, #16]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68d2      	ldr	r2, [r2, #12]
 8001466:	4311      	orrs	r1, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	430b      	orrs	r3, r1
 800146e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2220      	movs	r2, #32
 80014a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	000186a0 	.word	0x000186a0
 80014c8:	001e847f 	.word	0x001e847f
 80014cc:	003d08ff 	.word	0x003d08ff
 80014d0:	431bde83 	.word	0x431bde83
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	817b      	strh	r3, [r7, #10]
 80014e8:	4613      	mov	r3, r2
 80014ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff fbfe 	bl	8000cec <HAL_GetTick>
 80014f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	f040 80e0 	bne.w	80016c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2319      	movs	r3, #25
 8001506:	2201      	movs	r2, #1
 8001508:	4970      	ldr	r1, [pc, #448]	@ (80016cc <HAL_I2C_Master_Transmit+0x1f4>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f964 	bl	80017d8 <I2C_WaitOnFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001516:	2302      	movs	r3, #2
 8001518:	e0d3      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_I2C_Master_Transmit+0x50>
 8001524:	2302      	movs	r3, #2
 8001526:	e0cc      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d007      	beq.n	800154e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2221      	movs	r2, #33	@ 0x21
 8001562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2210      	movs	r2, #16
 800156a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	893a      	ldrh	r2, [r7, #8]
 800157e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a50      	ldr	r2, [pc, #320]	@ (80016d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800158e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001590:	8979      	ldrh	r1, [r7, #10]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	6a3a      	ldr	r2, [r7, #32]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f89c 	bl	80016d4 <I2C_MasterRequestWrite>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e08d      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015bc:	e066      	b.n	800168c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	6a39      	ldr	r1, [r7, #32]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa22 	bl	8001a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00d      	beq.n	80015ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d107      	bne.n	80015e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06b      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001612:	3b01      	subs	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d11b      	bne.n	8001660 <HAL_I2C_Master_Transmit+0x188>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	d017      	beq.n	8001660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800164a:	b29b      	uxth	r3, r3
 800164c:	3b01      	subs	r3, #1
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	6a39      	ldr	r1, [r7, #32]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 fa19 	bl	8001a9c <I2C_WaitOnBTFFlagUntilTimeout>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00d      	beq.n	800168c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	2b04      	cmp	r3, #4
 8001676:	d107      	bne.n	8001688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e01a      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d194      	bne.n	80015be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	e000      	b.n	80016c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
  }
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	00100002 	.word	0x00100002
 80016d0:	ffff0000 	.word	0xffff0000

080016d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af02      	add	r7, sp, #8
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	460b      	mov	r3, r1
 80016e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d006      	beq.n	80016fe <I2C_MasterRequestWrite+0x2a>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d003      	beq.n	80016fe <I2C_MasterRequestWrite+0x2a>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016fc:	d108      	bne.n	8001710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e00b      	b.n	8001728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	2b12      	cmp	r3, #18
 8001716:	d107      	bne.n	8001728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f84f 	bl	80017d8 <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800174e:	d103      	bne.n	8001758 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e035      	b.n	80017c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001764:	d108      	bne.n	8001778 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001766:	897b      	ldrh	r3, [r7, #10]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	e01b      	b.n	80017b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	11db      	asrs	r3, r3, #7
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0306 	and.w	r3, r3, #6
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f063 030f 	orn	r3, r3, #15
 8001788:	b2da      	uxtb	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	490e      	ldr	r1, [pc, #56]	@ (80017d0 <I2C_MasterRequestWrite+0xfc>)
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f898 	bl	80018cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e010      	b.n	80017c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4907      	ldr	r1, [pc, #28]	@ (80017d4 <I2C_MasterRequestWrite+0x100>)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f888 	bl	80018cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	00010008 	.word	0x00010008
 80017d4:	00010002 	.word	0x00010002

080017d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e8:	e048      	b.n	800187c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017f0:	d044      	beq.n	800187c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f2:	f7ff fa7b 	bl	8000cec <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d302      	bcc.n	8001808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d139      	bne.n	800187c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10d      	bne.n	800182e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	43da      	mvns	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	4013      	ands	r3, r2
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	e00c      	b.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	43da      	mvns	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4013      	ands	r3, r2
 800183a:	b29b      	uxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	429a      	cmp	r2, r3
 800184c:	d116      	bne.n	800187c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2220      	movs	r2, #32
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e023      	b.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10d      	bne.n	80018a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	43da      	mvns	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	4013      	ands	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	e00c      	b.n	80018bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4013      	ands	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d093      	beq.n	80017ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018da:	e071      	b.n	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ea:	d123      	bne.n	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f043 0204 	orr.w	r2, r3, #4
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e067      	b.n	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800193a:	d041      	beq.n	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193c:	f7ff f9d6 	bl	8000cec <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d302      	bcc.n	8001952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d136      	bne.n	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10c      	bne.n	8001976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4013      	ands	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	e00b      	b.n	800198e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	43da      	mvns	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4013      	ands	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e021      	b.n	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10c      	bne.n	80019e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	43da      	mvns	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e00b      	b.n	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4013      	ands	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f47f af6d 	bne.w	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a18:	e034      	b.n	8001a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f886 	bl	8001b2c <I2C_IsAcknowledgeFailed>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e034      	b.n	8001a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a30:	d028      	beq.n	8001a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a32:	f7ff f95b 	bl	8000cec <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d302      	bcc.n	8001a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11d      	bne.n	8001a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	2b80      	cmp	r3, #128	@ 0x80
 8001a54:	d016      	beq.n	8001a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e007      	b.n	8001a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	2b80      	cmp	r3, #128	@ 0x80
 8001a90:	d1c3      	bne.n	8001a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aa8:	e034      	b.n	8001b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f83e 	bl	8001b2c <I2C_IsAcknowledgeFailed>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e034      	b.n	8001b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ac0:	d028      	beq.n	8001b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac2:	f7ff f913 	bl	8000cec <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d302      	bcc.n	8001ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11d      	bne.n	8001b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d016      	beq.n	8001b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d1c3      	bne.n	8001aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b42:	d11b      	bne.n	8001b7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e267      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d075      	beq.n	8001c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001baa:	4b88      	ldr	r3, [pc, #544]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb6:	4b85      	ldr	r3, [pc, #532]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d112      	bne.n	8001be8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc2:	4b82      	ldr	r3, [pc, #520]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bce:	d10b      	bne.n	8001be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d05b      	beq.n	8001c94 <HAL_RCC_OscConfig+0x108>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d157      	bne.n	8001c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e242      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x74>
 8001bf2:	4b76      	ldr	r3, [pc, #472]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e01d      	b.n	8001c3c <HAL_RCC_OscConfig+0xb0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x98>
 8001c0a:	4b70      	ldr	r3, [pc, #448]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b6d      	ldr	r3, [pc, #436]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0xb0>
 8001c24:	4b69      	ldr	r3, [pc, #420]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a68      	ldr	r2, [pc, #416]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b66      	ldr	r3, [pc, #408]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a65      	ldr	r2, [pc, #404]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f852 	bl	8000cec <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f84e 	bl	8000cec <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e207      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0xc0>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f83e 	bl	8000cec <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff f83a 	bl	8000cec <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	@ 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1f3      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	4b51      	ldr	r3, [pc, #324]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0xe8>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cae:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cba:	4b44      	ldr	r3, [pc, #272]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x152>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1c7      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4937      	ldr	r1, [pc, #220]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_RCC_OscConfig+0x244>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe fff3 	bl	8000cec <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7fe ffef 	bl	8000cec <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1a8      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4925      	ldr	r1, [pc, #148]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <HAL_RCC_OscConfig+0x244>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe ffd2 	bl	8000cec <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7fe ffce 	bl	8000cec <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e187      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d036      	beq.n	8001de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_RCC_OscConfig+0x248>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7fe ffb2 	bl	8000cec <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7fe ffae 	bl	8000cec <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e167      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x200>
 8001daa:	e01b      	b.n	8001de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x248>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7fe ff9b 	bl	8000cec <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	e00e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dba:	f7fe ff97 	bl	8000cec <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d907      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e150      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	42470000 	.word	0x42470000
 8001dd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b88      	ldr	r3, [pc, #544]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ea      	bne.n	8001dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8097 	beq.w	8001f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b81      	ldr	r3, [pc, #516]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b7d      	ldr	r3, [pc, #500]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b7a      	ldr	r3, [pc, #488]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b77      	ldr	r3, [pc, #476]	@ (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b74      	ldr	r3, [pc, #464]	@ (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a73      	ldr	r2, [pc, #460]	@ (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe ff57 	bl	8000cec <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe ff53 	bl	8000cec <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e10c      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b6a      	ldr	r3, [pc, #424]	@ (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2ea>
 8001e68:	4b64      	ldr	r3, [pc, #400]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a63      	ldr	r2, [pc, #396]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x324>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x30c>
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	4a5e      	ldr	r2, [pc, #376]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x324>
 8001e98:	4b58      	ldr	r3, [pc, #352]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9c:	4a57      	ldr	r2, [pc, #348]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea4:	4b55      	ldr	r3, [pc, #340]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4a54      	ldr	r2, [pc, #336]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d015      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7fe ff18 	bl	8000cec <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7fe ff14 	bl	8000cec <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0cb      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ee      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x334>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7fe ff02 	bl	8000cec <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe fefe 	bl	8000cec <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0b5      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f02:	4b3e      	ldr	r3, [pc, #248]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ee      	bne.n	8001eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b39      	ldr	r3, [pc, #228]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	4a38      	ldr	r2, [pc, #224]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a1 	beq.w	800206c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f2a:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d05c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d141      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b31      	ldr	r3, [pc, #196]	@ (8002004 <HAL_RCC_OscConfig+0x478>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7fe fed2 	bl	8000cec <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fece 	bl	8000cec <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e087      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	491b      	ldr	r1, [pc, #108]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <HAL_RCC_OscConfig+0x478>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fea7 	bl	8000cec <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7fe fea3 	bl	8000cec <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e05c      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x416>
 8001fc0:	e054      	b.n	800206c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_RCC_OscConfig+0x478>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fe90 	bl	8000cec <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe fe8c 	bl	8000cec <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e045      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x444>
 8001fee:	e03d      	b.n	800206c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e038      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000
 8002004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4ec>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d028      	beq.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d121      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d11a      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002038:	4013      	ands	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800203e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0cc      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d90c      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b65      	ldr	r3, [pc, #404]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a58      	ldr	r2, [pc, #352]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a52      	ldr	r2, [pc, #328]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d044      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	2b03      	cmp	r3, #3
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e067      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4934      	ldr	r1, [pc, #208]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7fe fdbe 	bl	8000cec <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7fe fdba 	bl	8000cec <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e04f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d20c      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f821 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002206:	4602      	mov	r2, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	490a      	ldr	r1, [pc, #40]	@ (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fd1e 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00
 8002238:	40023800 	.word	0x40023800
 800223c:	08002b88 	.word	0x08002b88
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	b094      	sub	sp, #80	@ 0x50
 800224e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002260:	4b79      	ldr	r3, [pc, #484]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x200>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d00d      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x40>
 800226c:	2b08      	cmp	r3, #8
 800226e:	f200 80e1 	bhi.w	8002434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x34>
 8002276:	2b04      	cmp	r3, #4
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x3a>
 800227a:	e0db      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b73      	ldr	r3, [pc, #460]	@ (800244c <HAL_RCC_GetSysClockFreq+0x204>)
 800227e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002280:	e0db      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002282:	4b73      	ldr	r3, [pc, #460]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x208>)
 8002284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002286:	e0d8      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002288:	4b6f      	ldr	r3, [pc, #444]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x200>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002290:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002292:	4b6d      	ldr	r3, [pc, #436]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x200>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229e:	4b6a      	ldr	r3, [pc, #424]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	099b      	lsrs	r3, r3, #6
 80022a4:	2200      	movs	r2, #0
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022ba:	4622      	mov	r2, r4
 80022bc:	462b      	mov	r3, r5
 80022be:	f04f 0000 	mov.w	r0, #0
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	0159      	lsls	r1, r3, #5
 80022c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022cc:	0150      	lsls	r0, r2, #5
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4621      	mov	r1, r4
 80022d4:	1a51      	subs	r1, r2, r1
 80022d6:	6139      	str	r1, [r7, #16]
 80022d8:	4629      	mov	r1, r5
 80022da:	eb63 0301 	sbc.w	r3, r3, r1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022ec:	4659      	mov	r1, fp
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	4651      	mov	r1, sl
 80022f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022f6:	4651      	mov	r1, sl
 80022f8:	018a      	lsls	r2, r1, #6
 80022fa:	4651      	mov	r1, sl
 80022fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002300:	4659      	mov	r1, fp
 8002302:	eb63 0901 	sbc.w	r9, r3, r1
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800231a:	4690      	mov	r8, r2
 800231c:	4699      	mov	r9, r3
 800231e:	4623      	mov	r3, r4
 8002320:	eb18 0303 	adds.w	r3, r8, r3
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	462b      	mov	r3, r5
 8002328:	eb49 0303 	adc.w	r3, r9, r3
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800233a:	4629      	mov	r1, r5
 800233c:	024b      	lsls	r3, r1, #9
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002344:	4621      	mov	r1, r4
 8002346:	024a      	lsls	r2, r1, #9
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800234e:	2200      	movs	r2, #0
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002358:	f7fd ff3e 	bl	80001d8 <__aeabi_uldivmod>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4613      	mov	r3, r2
 8002362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002364:	e058      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x200>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	2200      	movs	r2, #0
 800236e:	4618      	mov	r0, r3
 8002370:	4611      	mov	r1, r2
 8002372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
 800237c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	f04f 0000 	mov.w	r0, #0
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	0159      	lsls	r1, r3, #5
 800238e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002392:	0150      	lsls	r0, r2, #5
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4641      	mov	r1, r8
 800239a:	ebb2 0a01 	subs.w	sl, r2, r1
 800239e:	4649      	mov	r1, r9
 80023a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023b8:	ebb2 040a 	subs.w	r4, r2, sl
 80023bc:	eb63 050b 	sbc.w	r5, r3, fp
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	00eb      	lsls	r3, r5, #3
 80023ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ce:	00e2      	lsls	r2, r4, #3
 80023d0:	4614      	mov	r4, r2
 80023d2:	461d      	mov	r5, r3
 80023d4:	4643      	mov	r3, r8
 80023d6:	18e3      	adds	r3, r4, r3
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	464b      	mov	r3, r9
 80023dc:	eb45 0303 	adc.w	r3, r5, r3
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ee:	4629      	mov	r1, r5
 80023f0:	028b      	lsls	r3, r1, #10
 80023f2:	4621      	mov	r1, r4
 80023f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f8:	4621      	mov	r1, r4
 80023fa:	028a      	lsls	r2, r1, #10
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002402:	2200      	movs	r2, #0
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	61fa      	str	r2, [r7, #28]
 8002408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800240c:	f7fd fee4 	bl	80001d8 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4613      	mov	r3, r2
 8002416:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x200>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002428:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800242a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetSysClockFreq+0x204>)
 8002436:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800243c:	4618      	mov	r0, r3
 800243e:	3750      	adds	r7, #80	@ 0x50
 8002440:	46bd      	mov	sp, r7
 8002442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	00f42400 	.word	0x00f42400
 8002450:	007a1200 	.word	0x007a1200

08002454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_GetHCLKFreq+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000000 	.word	0x20000000

0800246c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002470:	f7ff fff0 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0a9b      	lsrs	r3, r3, #10
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	@ (8002490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	08002b98 	.word	0x08002b98

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002498:	f7ff ffdc 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0b5b      	lsrs	r3, r3, #13
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	@ (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08002b98 	.word	0x08002b98

080024bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e042      	b.n	8002554 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe faf6 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	@ 0x24
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f82b 	bl	800255c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b0c0      	sub	sp, #256	@ 0x100
 8002562:	af00      	add	r7, sp, #0
 8002564:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	ea40 0301 	orr.w	r3, r0, r1
 8002584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025b4:	f021 010c 	bic.w	r1, r1, #12
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025c2:	430b      	orrs	r3, r1
 80025c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	6999      	ldr	r1, [r3, #24]
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	ea40 0301 	orr.w	r3, r0, r1
 80025e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002828 <UART_SetConfig+0x2cc>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d005      	beq.n	80025fc <UART_SetConfig+0xa0>
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b8d      	ldr	r3, [pc, #564]	@ (800282c <UART_SetConfig+0x2d0>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d104      	bne.n	8002606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025fc:	f7ff ff4a 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8002600:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002604:	e003      	b.n	800260e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002606:	f7ff ff31 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 800260a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002618:	f040 810c 	bne.w	8002834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800261c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002626:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800262a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800262e:	4622      	mov	r2, r4
 8002630:	462b      	mov	r3, r5
 8002632:	1891      	adds	r1, r2, r2
 8002634:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002636:	415b      	adcs	r3, r3
 8002638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800263a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800263e:	4621      	mov	r1, r4
 8002640:	eb12 0801 	adds.w	r8, r2, r1
 8002644:	4629      	mov	r1, r5
 8002646:	eb43 0901 	adc.w	r9, r3, r1
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800265a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800265e:	4690      	mov	r8, r2
 8002660:	4699      	mov	r9, r3
 8002662:	4623      	mov	r3, r4
 8002664:	eb18 0303 	adds.w	r3, r8, r3
 8002668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800266c:	462b      	mov	r3, r5
 800266e:	eb49 0303 	adc.w	r3, r9, r3
 8002672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002682:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800268a:	460b      	mov	r3, r1
 800268c:	18db      	adds	r3, r3, r3
 800268e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002690:	4613      	mov	r3, r2
 8002692:	eb42 0303 	adc.w	r3, r2, r3
 8002696:	657b      	str	r3, [r7, #84]	@ 0x54
 8002698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800269c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026a0:	f7fd fd9a 	bl	80001d8 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <UART_SetConfig+0x2d4>)
 80026aa:	fba3 2302 	umull	r2, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	011c      	lsls	r4, r3, #4
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026cc:	415b      	adcs	r3, r3
 80026ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026d4:	4641      	mov	r1, r8
 80026d6:	eb12 0a01 	adds.w	sl, r2, r1
 80026da:	4649      	mov	r1, r9
 80026dc:	eb43 0b01 	adc.w	fp, r3, r1
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f4:	4692      	mov	sl, r2
 80026f6:	469b      	mov	fp, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	eb1a 0303 	adds.w	r3, sl, r3
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002702:	464b      	mov	r3, r9
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002718:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800271c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002720:	460b      	mov	r3, r1
 8002722:	18db      	adds	r3, r3, r3
 8002724:	643b      	str	r3, [r7, #64]	@ 0x40
 8002726:	4613      	mov	r3, r2
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	647b      	str	r3, [r7, #68]	@ 0x44
 800272e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002736:	f7fd fd4f 	bl	80001d8 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4611      	mov	r1, r2
 8002740:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <UART_SetConfig+0x2d4>)
 8002742:	fba3 2301 	umull	r2, r3, r3, r1
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2264      	movs	r2, #100	@ 0x64
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	1acb      	subs	r3, r1, r3
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002756:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <UART_SetConfig+0x2d4>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002764:	441c      	add	r4, r3
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002770:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002780:	415b      	adcs	r3, r3
 8002782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6339      	str	r1, [r7, #48]	@ 0x30
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	637b      	str	r3, [r7, #52]	@ 0x34
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027bc:	464b      	mov	r3, r9
 80027be:	460a      	mov	r2, r1
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027dc:	460b      	mov	r3, r1
 80027de:	18db      	adds	r3, r3, r3
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e2:	4613      	mov	r3, r2
 80027e4:	eb42 0303 	adc.w	r3, r2, r3
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027f2:	f7fd fcf1 	bl	80001d8 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <UART_SetConfig+0x2d4>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	2164      	movs	r1, #100	@ 0x64
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	3332      	adds	r3, #50	@ 0x32
 800280e:	4a08      	ldr	r2, [pc, #32]	@ (8002830 <UART_SetConfig+0x2d4>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4422      	add	r2, r4
 8002822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002824:	e106      	b.n	8002a34 <UART_SetConfig+0x4d8>
 8002826:	bf00      	nop
 8002828:	40011000 	.word	0x40011000
 800282c:	40011400 	.word	0x40011400
 8002830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002838:	2200      	movs	r2, #0
 800283a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800283e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002846:	4642      	mov	r2, r8
 8002848:	464b      	mov	r3, r9
 800284a:	1891      	adds	r1, r2, r2
 800284c:	6239      	str	r1, [r7, #32]
 800284e:	415b      	adcs	r3, r3
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
 8002852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002856:	4641      	mov	r1, r8
 8002858:	1854      	adds	r4, r2, r1
 800285a:	4649      	mov	r1, r9
 800285c:	eb43 0501 	adc.w	r5, r3, r1
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	00eb      	lsls	r3, r5, #3
 800286a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286e:	00e2      	lsls	r2, r4, #3
 8002870:	4614      	mov	r4, r2
 8002872:	461d      	mov	r5, r3
 8002874:	4643      	mov	r3, r8
 8002876:	18e3      	adds	r3, r4, r3
 8002878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800287c:	464b      	mov	r3, r9
 800287e:	eb45 0303 	adc.w	r3, r5, r3
 8002882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002892:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028a2:	4629      	mov	r1, r5
 80028a4:	008b      	lsls	r3, r1, #2
 80028a6:	4621      	mov	r1, r4
 80028a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ac:	4621      	mov	r1, r4
 80028ae:	008a      	lsls	r2, r1, #2
 80028b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028b4:	f7fd fc90 	bl	80001d8 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4b60      	ldr	r3, [pc, #384]	@ (8002a40 <UART_SetConfig+0x4e4>)
 80028be:	fba3 2302 	umull	r2, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	011c      	lsls	r4, r3, #4
 80028c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	1891      	adds	r1, r2, r2
 80028de:	61b9      	str	r1, [r7, #24]
 80028e0:	415b      	adcs	r3, r3
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e8:	4641      	mov	r1, r8
 80028ea:	1851      	adds	r1, r2, r1
 80028ec:	6139      	str	r1, [r7, #16]
 80028ee:	4649      	mov	r1, r9
 80028f0:	414b      	adcs	r3, r1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002900:	4659      	mov	r1, fp
 8002902:	00cb      	lsls	r3, r1, #3
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290a:	4651      	mov	r1, sl
 800290c:	00ca      	lsls	r2, r1, #3
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	4603      	mov	r3, r0
 8002914:	4642      	mov	r2, r8
 8002916:	189b      	adds	r3, r3, r2
 8002918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800291c:	464b      	mov	r3, r9
 800291e:	460a      	mov	r2, r1
 8002920:	eb42 0303 	adc.w	r3, r2, r3
 8002924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002932:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002940:	4649      	mov	r1, r9
 8002942:	008b      	lsls	r3, r1, #2
 8002944:	4641      	mov	r1, r8
 8002946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800294a:	4641      	mov	r1, r8
 800294c:	008a      	lsls	r2, r1, #2
 800294e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002952:	f7fd fc41 	bl	80001d8 <__aeabi_uldivmod>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4611      	mov	r1, r2
 800295c:	4b38      	ldr	r3, [pc, #224]	@ (8002a40 <UART_SetConfig+0x4e4>)
 800295e:	fba3 2301 	umull	r2, r3, r3, r1
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2264      	movs	r2, #100	@ 0x64
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	1acb      	subs	r3, r1, r3
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	3332      	adds	r3, #50	@ 0x32
 8002970:	4a33      	ldr	r2, [pc, #204]	@ (8002a40 <UART_SetConfig+0x4e4>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800297c:	441c      	add	r4, r3
 800297e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002982:	2200      	movs	r2, #0
 8002984:	673b      	str	r3, [r7, #112]	@ 0x70
 8002986:	677a      	str	r2, [r7, #116]	@ 0x74
 8002988:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	1891      	adds	r1, r2, r2
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	415b      	adcs	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800299c:	4641      	mov	r1, r8
 800299e:	1851      	adds	r1, r2, r1
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	4649      	mov	r1, r9
 80029a4:	414b      	adcs	r3, r1
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029b4:	4659      	mov	r1, fp
 80029b6:	00cb      	lsls	r3, r1, #3
 80029b8:	4651      	mov	r1, sl
 80029ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029be:	4651      	mov	r1, sl
 80029c0:	00ca      	lsls	r2, r1, #3
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	4642      	mov	r2, r8
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ce:	464b      	mov	r3, r9
 80029d0:	460a      	mov	r2, r1
 80029d2:	eb42 0303 	adc.w	r3, r2, r3
 80029d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80029e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029f0:	4649      	mov	r1, r9
 80029f2:	008b      	lsls	r3, r1, #2
 80029f4:	4641      	mov	r1, r8
 80029f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fa:	4641      	mov	r1, r8
 80029fc:	008a      	lsls	r2, r1, #2
 80029fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a02:	f7fd fbe9 	bl	80001d8 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <UART_SetConfig+0x4e4>)
 8002a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	2164      	movs	r1, #100	@ 0x64
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	3332      	adds	r3, #50	@ 0x32
 8002a1e:	4a08      	ldr	r2, [pc, #32]	@ (8002a40 <UART_SetConfig+0x4e4>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4422      	add	r2, r4
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a40:	51eb851f 	.word	0x51eb851f

08002a44 <memset>:
 8002a44:	4402      	add	r2, r0
 8002a46:	4603      	mov	r3, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <__libc_init_array>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	4d0d      	ldr	r5, [pc, #52]	@ (8002a8c <__libc_init_array+0x38>)
 8002a58:	4c0d      	ldr	r4, [pc, #52]	@ (8002a90 <__libc_init_array+0x3c>)
 8002a5a:	1b64      	subs	r4, r4, r5
 8002a5c:	10a4      	asrs	r4, r4, #2
 8002a5e:	2600      	movs	r6, #0
 8002a60:	42a6      	cmp	r6, r4
 8002a62:	d109      	bne.n	8002a78 <__libc_init_array+0x24>
 8002a64:	4d0b      	ldr	r5, [pc, #44]	@ (8002a94 <__libc_init_array+0x40>)
 8002a66:	4c0c      	ldr	r4, [pc, #48]	@ (8002a98 <__libc_init_array+0x44>)
 8002a68:	f000 f818 	bl	8002a9c <_init>
 8002a6c:	1b64      	subs	r4, r4, r5
 8002a6e:	10a4      	asrs	r4, r4, #2
 8002a70:	2600      	movs	r6, #0
 8002a72:	42a6      	cmp	r6, r4
 8002a74:	d105      	bne.n	8002a82 <__libc_init_array+0x2e>
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7c:	4798      	blx	r3
 8002a7e:	3601      	adds	r6, #1
 8002a80:	e7ee      	b.n	8002a60 <__libc_init_array+0xc>
 8002a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a86:	4798      	blx	r3
 8002a88:	3601      	adds	r6, #1
 8002a8a:	e7f2      	b.n	8002a72 <__libc_init_array+0x1e>
 8002a8c:	08002ba8 	.word	0x08002ba8
 8002a90:	08002ba8 	.word	0x08002ba8
 8002a94:	08002ba8 	.word	0x08002ba8
 8002a98:	08002bac 	.word	0x08002bac

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
